FUNCTION_BLOCK aceleracion

VAR_INPUT
    s0 : REAL;
    s1 : REAL;
    s2 : REAL;  
    s3 : REAL;
    s4 : REAL;
    s5 : REAL; 
    s6 : REAL;
    s7 : REAL;
    s8 : REAL;
    sig : REAL;
END_VAR

VAR_OUTPUT
    vel : REAL;
    rot : REAL;
END_VAR

FUZZIFY s0
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (1,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s1
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s2
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s3
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s4
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s5
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s6
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s7
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY s8
    TERM verynear   := (0,1) (0.3,0);
    TERM near   := (0,1) (0.6,0);
    TERM mid   := (0,0) (0.375,0) (0.75,1) (1.125,0);
    TERM far    := (0.6,0) (1.5,1);
    TERM veryfar    := (1,0) (1.5,1);
END_FUZZIFY

FUZZIFY sig
    TERM der   := (-180,1) (0,0);
    TERM med   := (-180,0) (-45,1) (45,1) (180,0);
    TERM izq    := (0,0) (180,1);
END_FUZZIFY




//EJEMPLO de definición NO VINCULANTE
DEFUZZIFY vel // entre 0 y 2.5 m/s
    TERM atras   := (-1,1) (-0.01,1) (0,0);
    TERM fast   := (0,0) (2.5,1);
    TERM veryfast   := (0,0) (1.5,0) (1.51,1) (2.5,1);
    TERM med    := (0,0) (1.25,1) (2.5,0);
    TERM slow   := (0,1) (2.5,0);
    TERM veryslow   := (0,1) (1,0) (2.5,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 1;
END_DEFUZZIFY

//EJEMPLO de definición NO VINCULANTE
DEFUZZIFY rot // entre -10 y 10 rad/s
    TERM izqm   :=    (-10,0) (0,0) (10,1);
    TERM izqsemi   :=    (-10,0) (0,0) (2,0) (10,1);
    TERM izq    :=    (-10,0)(-5,0) (-1,0) (0,1) (5,1) (10,0);
    TERM cen    :=    (-10,0) (-5,0) (-2.5,1) (2.5,1) (5,0);
    TERM muycen    :=    (-10,0) (-5,0) (-0.51,0) (-0.5,1) (0.5,1) (0.51,0) (5,0);
    TERM der    :=    (-10,0) (-5,1) (0,1) (1,0) (5,0) (10,0);
    TERM dersemi   :=    (-10,1) (-2,0) (0,0) (10,0);
    TERM derm   :=    (-10,1) (0,0) (10,0);

    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 1 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

//Reglas por defecto
//EJEMPLO de definición de reglas NO VINCULANTE
RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : PROD;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    //Definir las reglas del SE
    RULE 10: IF s0 IS far AND s1 IS far AND s2 IS far AND s7 IS far AND s8 IS far THEN vel IS veryfast, rot IS cen;
    RULE 20: IF s0 IS verynear THEN vel IS atras;
    RULE 21: IF s0 IS near THEN vel IS veryslow;
    RULE 22: IF s0 IS mid THEN vel IS slow;
    RULE 30: IF s1 IS verynear THEN rot IS derm;
    RULE 31: IF s2 IS verynear THEN rot IS der;
    RULE 40: IF s8 IS verynear THEN rot IS izqm;
    RULE 41: IF s7 IS verynear THEN rot IS izq;
    //RULE 3: IF s0 IS verynear AND s4 IS NOT verynear AND s3 IS NOT verynear THEN vel IS atras;
    //RULE 9: IF s0 IS verynear AND s5 IS NOT verynear AND s6 IS NOT verynear THEN vel IS atras;
    //RULE 4: IF s2 IS verynear AND s4 IS NOT verynear AND s3 IS NOT verynear THEN vel IS atras;
    //RULE 5: IF s7 IS verynear AND s5 IS NOT verynear AND s6 IS NOT verynear THEN vel IS atras;
    //RULE 1: IF s2 IS verynear THEN rot IS der;
    //RULE 2: IF s7 IS verynear THEN rot IS izq;
    //RULE 3: IF s0 IS near AND s2 IS NOT verynear THEN vel IS slow, rot IS izq;
    //RULE 4: IF s0 IS near AND s7 IS NOT verynear THEN vel IS slow, rot IS der;
    //RULE 5: IF s0 IS far THEN vel IS med;
    RULE 60: IF sig IS med THEN rot IS cen;
    RULE 70: IF sig IS izq THEN rot IS izq;
    RULE 80: IF sig IS der THEN rot IS der;
    RULE 100: IF sig IS der THEN rot IS der;
    RULE 101: IF sig IS izq THEN rot IS izq;
    //RULE 11: IF s0 IS far THEN vel is veryfast;
    //RULE 12: IF s2 IS near THEN rot is der;

END_RULEBLOCK

END_FUNCTION_BLOCK
